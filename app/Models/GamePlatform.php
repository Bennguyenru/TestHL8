<?php

namespace App\Models;

use App\Models\Traits\RememberCache;
use App\Repositories\GamePlatformUserRepository;

class GamePlatform extends Model
{
    use RememberCache;

    protected $rememberCacheTag = 'game_platforms';

    public static $cacheExpireInMinutes = 43200;

    protected $fillable = [
        'name',
        'code',
        'icon',
        'request_url',
        'report_request_url',
        'launcher_request_url',
        'rsa_our_private_key',
        'rsa_our_public_key',
        'rsa_public_key',
        'is_maintain',
        'is_wallet_maintain',
        'account',
        'interval',
        'delay',
        'offset',
        'limit',
        'is_auto_transfer',
        'is_update_odds',
        'remark',
        'status',
        'sort',
    ];

    protected $casts = [
        'is_auto_transfer'      => 'boolean',
        'status'                => 'boolean',
        'is_update_list'        => 'boolean',
        'is_update_odds'        => 'boolean',
        'is_maintain'           => 'boolean',
        'account'               => 'array',
        'exchange_currencies'   => 'array',
    ];

    protected $dates = [
        'last_updated_at',
    ];

    public function gamePlatformUsers()
    {
        return $this->hasMany(GamePlatformUser::class);
    }

    public function schedules()
    {
        return $this->hasMany(GamePlatformPullReportSchedule::class, 'platform_code', 'code');
    }

    public static function findByCode($code)
    {
        return static::getAll()->where('code', $code)->first();
    }

    public static function getDropList($isCode = false)
    {
        $dropList = $isCode ? static::getAll()->pluck('code', 'code')->toArray() : static::getAll()->pluck('code', 'id')->toArray();
        return $dropList;
    }

    /**
     * 获取包含主钱包的下拉列表
     *
     * @return mixed
     */
    public static function getDropListContainMainWallet()
    {
        return static::getAll()->pluck('code', 'code')->prepend(UserAccount::getLangName(), UserAccount::MAIN_WALLET)->toArray();
    }

    public static function getEnablePlatformCode()
    {
        return static::getAll()->where('status', true)->pluck('code')->toArray();
    }

    public function isEnable()
    {
        return $this->status;
    }

    public function isMaintain()
    {
        return $this->is_maintain;
    }

    /**
     * 获取最后一个时间表
     *
     * @return object
     */
    public function findLastSchedule()
    {
        return $this->schedules()
            ->latest('start_at')
            ->first();
    }

    /**
     * 获取最后非未拉取的时间表
     *
     * @return object
     */
    public function findLastSuccessSchedule()
    {
        return $this->schedules()
            ->where('status', '!=', GamePlatformPullReportSchedule::STATUS_CREATED)
            ->latest('start_at')
            ->first();
    }

    /**
     * 删除时刻表
     *
     * @param $startAt
     */
    public function deleteSchedule($startAt)
    {
        $this->schedules()
            ->where('start_at', '>=', $startAt)
            ->where('status', '=', GamePlatformPullReportSchedule::STATUS_CREATED)
            ->delete();
    }

    /**
     * 获取未拉取/失败的时间表
     *
     * @param  int  $limit
     * @param  int  $status
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function getNoProcessSchedules($limit=0, $status=GamePlatformPullReportSchedule::STATUS_CREATED)
    {
        $now = now();
        $query = $this->schedules()
            ->where('end_at', '<', $now->subMinutes($this->delay))
            ->where('status', $status)
            ->where('times', '<=', 2);

        if (GamePlatformPullReportSchedule::STATUS_FAIL == $status) {
            $query->where('remarks', 'like', '%maintenance%');
        }

        if (!empty($limit)) {

            # S128需要2分钟拉取一次才行做特殊处理
            if ('S128' == $this->code && $now->minute % 2 == 0) {
                return collect();
            } else {
                $query->limit($limit);
            }
        }

        return $query->get();
    }

    public function updateLastUpdateAt()
    {
        return $this->update([
            'last_updated_at' => now(),
        ]);
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        # 删除
        static::deleted(function($model) {
            $model->gamePlatformUsers()->delete();
            $model->flushCache();
        });

        # 添加
        static::created(function($model) {
            # 所有会员注册平台
            GamePlatformUserRepository::allUserRegisterPlatform($model);
        });

        static::saved(function($model) {
            $model->flushCache();
        });
    }
}
